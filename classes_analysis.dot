digraph "classes_analysis" {
rankdir=BT
charset="utf-8"
"src.chromatographicpeakpicking.analysis.baseline.aals.AALSConfig" [color="black", fontcolor="black", label=<{AALSConfig|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.chromatographicpeakpicking.analysis.baseline.aals.AALSCorrector" [color="black", fontcolor="black", label=<{AALSCorrector|config<br ALIGN="LEFT"/>|configure(config: AALSConfig): ValidationResult<br ALIGN="LEFT"/>correct(chromatogram: Chromatogram): Chromatogram<br ALIGN="LEFT"/>get_metadata(): ConfigMetadata<br ALIGN="LEFT"/>validate(chromatogram: Chromatogram): None<br ALIGN="LEFT"/>validate_config(config: AALSConfig): ValidationResult<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.chromatographicpeakpicking.analysis.base.analysis_context.AnalysisContext" [color="black", fontcolor="black", label=<{AnalysisContext|<br ALIGN="LEFT"/>|register_analyzer(name: str, analyzer: Analyzer): None<br ALIGN="LEFT"/>run_analysis(name: str, data: Any): AnalysisResult<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.chromatographicpeakpicking.analysis.protocols.analyzer.AnalysisResult" [color="black", fontcolor="black", label=<{AnalysisResult|execution_time : float<br ALIGN="LEFT"/>metadata : Dict[str, Any]<br ALIGN="LEFT"/>result : Output<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.chromatographicpeakpicking.analysis.protocols.analyzer.Analyzer" [color="black", fontcolor="black", label=<{Analyzer|<br ALIGN="LEFT"/>|<I>analyze</I>(data: Input): AnalysisResult[Output]<br ALIGN="LEFT"/><I>validate</I>(data: Input): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.chromatographicpeakpicking.analysis.chromatogram.baseline_analyzer.BaselineAnalysisResult" [color="black", fontcolor="black", label=<{BaselineAnalysisResult|baseline : ndarray<br ALIGN="LEFT"/>metrics : Dict[str, float]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.chromatographicpeakpicking.analysis.chromatogram.baseline_analyzer.BaselineAnalyzer" [color="black", fontcolor="black", label=<{BaselineAnalyzer|<br ALIGN="LEFT"/>|analyze(data: Chromatogram): AnalysisResult[BaselineAnalysisResult]<br ALIGN="LEFT"/>validate(data: Chromatogram): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.chromatographicpeakpicking.analysis.peak.peak_analyzer.PeakAnalysisResult" [color="black", fontcolor="black", label=<{PeakAnalysisResult|fit_params : Dict[str, float]<br ALIGN="LEFT"/>peak : Peak<br ALIGN="LEFT"/>quality_metrics : Dict[str, float]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.chromatographicpeakpicking.analysis.peak.peak_analyzer.PeakAnalyzer" [color="black", fontcolor="black", label=<{PeakAnalyzer|intensities : ndarray<br ALIGN="LEFT"/>time_points : ndarray<br ALIGN="LEFT"/>|analyze(data: Peak): AnalysisResult[PeakAnalysisResult]<br ALIGN="LEFT"/>validate(data: Peak): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.chromatographicpeakpicking.analysis.chromatogram.peak_detector.PeakDetectionResult" [color="black", fontcolor="black", label=<{PeakDetectionResult|metrics : Dict[str, float]<br ALIGN="LEFT"/>peaks : List[Peak]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.chromatographicpeakpicking.analysis.chromatogram.peak_detector.PeakDetector" [color="black", fontcolor="black", label=<{PeakDetector|height_threshold : float<br ALIGN="LEFT"/>prominence_threshold : float<br ALIGN="LEFT"/>width_threshold : float<br ALIGN="LEFT"/>|analyze(data: Chromatogram): AnalysisResult[PeakDetectionResult]<br ALIGN="LEFT"/>validate(data: Chromatogram): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.chromatographicpeakpicking.analysis.peak.peak_interogrator.PeakIntegrationResult" [color="black", fontcolor="black", label=<{PeakIntegrationResult|area : float<br ALIGN="LEFT"/>baseline_corrected_area : float<br ALIGN="LEFT"/>metrics : Dict[str, float]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.chromatographicpeakpicking.analysis.peak.peak_interogrator.PeakIntegrator" [color="black", fontcolor="black", label=<{PeakIntegrator|intensities : ndarray<br ALIGN="LEFT"/>time_points : ndarray<br ALIGN="LEFT"/>window_size : int<br ALIGN="LEFT"/>|analyze(data: Peak): AnalysisResult[PeakIntegrationResult]<br ALIGN="LEFT"/>validate(data: Peak): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.chromatographicpeakpicking.analysis.baseline.swm.SWM" [color="black", fontcolor="black", label=<{SWM|config<br ALIGN="LEFT"/>|configure(config: SWMConfig): ValidationResult<br ALIGN="LEFT"/>correct(chromatogram: Chromatogram): Chromatogram<br ALIGN="LEFT"/>get_metadata(): ConfigMetadata<br ALIGN="LEFT"/>validate_config(config: SWMConfig): ValidationResult<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.chromatographicpeakpicking.analysis.baseline.swm.SWMConfig" [color="black", fontcolor="black", label=<{SWMConfig|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.chromatographicpeakpicking.analysis.chromatogram.baseline_analyzer.BaselineAnalyzer" -> "src.chromatographicpeakpicking.analysis.protocols.analyzer.Analyzer" [arrowhead="empty", arrowtail="none"];
"src.chromatographicpeakpicking.analysis.chromatogram.peak_detector.PeakDetector" -> "src.chromatographicpeakpicking.analysis.protocols.analyzer.Analyzer" [arrowhead="empty", arrowtail="none"];
"src.chromatographicpeakpicking.analysis.peak.peak_analyzer.PeakAnalyzer" -> "src.chromatographicpeakpicking.analysis.protocols.analyzer.Analyzer" [arrowhead="empty", arrowtail="none"];
"src.chromatographicpeakpicking.analysis.peak.peak_interogrator.PeakIntegrator" -> "src.chromatographicpeakpicking.analysis.protocols.analyzer.Analyzer" [arrowhead="empty", arrowtail="none"];
"src.chromatographicpeakpicking.analysis.baseline.aals.AALSConfig" -> "src.chromatographicpeakpicking.analysis.baseline.aals.AALSCorrector" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"src.chromatographicpeakpicking.analysis.baseline.swm.SWMConfig" -> "src.chromatographicpeakpicking.analysis.baseline.swm.SWM" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
}
